package hr.fer.zemris.java.raytracer;

import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.atomic.AtomicBoolean;

import hr.fer.zemris.java.raytracer.model.GraphicalObject;
import hr.fer.zemris.java.raytracer.model.IRayTracerAnimator;
import hr.fer.zemris.java.raytracer.model.IRayTracerProducer;
import hr.fer.zemris.java.raytracer.model.IRayTracerResultObserver;
import hr.fer.zemris.java.raytracer.model.LightSource;
import hr.fer.zemris.java.raytracer.model.Point3D;
import hr.fer.zemris.java.raytracer.model.Ray;
import hr.fer.zemris.java.raytracer.model.RayIntersection;
import hr.fer.zemris.java.raytracer.model.Scene;
import hr.fer.zemris.java.raytracer.viewer.RayTracerViewer;

/**
 * Program that renders an image of spheres using Ray-casting algorithm. It
 * rotates around the spheres.
 * 
 * @author david
 *
 */
public class RayCasterParallel2 {
	/**
	 * Method invoked when running the program. This method renders an image of
	 * spheres.
	 * 
	 * @param args Arguments provided via command line. In this program they are not
	 *             used.
	 */
	public static void main(String[] args) {
		RayTracerViewer.show(getIRayTracerProducer(), getIRayTracerAnimator(), 30, 30);
	}

	/**
	 * Returns IRayTracerAnimator.
	 * 
	 * @return IRayTracerAnimator.
	 */
	private static IRayTracerAnimator getIRayTracerAnimator() {
		return new IRayTracerAnimator() {
			/**
			 * Time.
			 */
			long time;

			/**
			 * {@inheritDoc}
			 */
			@Override
			public void update(long deltaTime) {
				time += deltaTime;
			}

			/**
			 * {@inheritDoc}
			 */
			@Override
			public Point3D getViewUp() { // fixed in time
				return new Point3D(0, 0, 10);
			}

			/**
			 * {@inheritDoc}
			 */
			@Override
			public Point3D getView() { // fixed in time
				return new Point3D(-2, 0, -0.5);
			}

			/**
			 * {@inheritDoc}
			 */
			@Override
			public long getTargetTimeFrameDuration() {
				return 150; // redraw scene each 150 milliseconds
			}

			/**
			 * {@inheritDoc}
			 */
			@Override
			public Point3D getEye() { // changes in time
				double t = (double) time / 10000 * 2 * Math.PI;
				double t2 = (double) time / 5000 * 2 * Math.PI;
				double x = 50 * Math.cos(t);
				double y = 50 * Math.sin(t);
				double z = 30 * Math.sin(t2);
				return new Point3D(x, y, z);
			}
		};
	}

	/**
	 * Return ray tracer producer.
	 * 
	 * @return Ray tracer producer.
	 */
	private static IRayTracerProducer getIRayTracerProducer() {

		return new IRayTracerProducer() {

			@Override
			public void produce(Point3D eye, Point3D view, Point3D viewUp, double horizontal, double vertical,
					int width, int height, long requestNo, IRayTracerResultObserver observer, AtomicBoolean cancel) {

				System.out.println("Započinjem izračune...");

				short[] red = new short[width * height];
				short[] green = new short[width * height];
				short[] blue = new short[width * height];
				
				RayCasterUtil rayCaster = new RayCasterUtil();
				
				Point3D OG = rayCaster.getOGVector(view, eye);
				Point3D yAxis = rayCaster.getYAxis(viewUp.normalize(), OG);
				Point3D xAxis = rayCaster.getXAxis(OG, yAxis);

				Point3D screenCorner = rayCaster.getScreenCorner(view, xAxis, yAxis, horizontal, vertical);
				Scene scene = RayTracerViewer.createPredefinedScene2();

				ForkJoinPool pool = new ForkJoinPool();
				int offset = 0;
				pool.invoke(new Worker(width, height, horizontal, vertical, screenCorner, eye, yAxis, xAxis, scene, red,
						green, blue, offset, 0, height - 1, rayCaster));
				pool.shutdown();

				System.out.println("Izračuni gotovi...");
				observer.acceptResult(red, green, blue, requestNo);
				System.out.println("Dojava gotova...");
			}
		};
	}

	/**
	 * Represents one task. This class extends RecursiveAction. This means that
	 * tasks are splitted recursively until they are small enough to be computed
	 * directly.
	 * 
	 * @author david
	 *
	 */
	public static class Worker extends RecursiveAction {
		/**
		 * Default serial version uid.
		 */
		private static final long serialVersionUID = 1L;
		/**
		 * Width and height of the window.
		 */
		private int width;
		private int height;

		/**
		 * Horizontal and vertical.
		 */
		private double horizontal;
		private double vertical;

		/**
		 * Corner of the screen.
		 */
		private Point3D screenCorner;

		/**
		 * Point of view.
		 */
		private Point3D eye;

		/**
		 * Y-axis and x-axis coordinates.
		 */
		private Point3D yAxis;
		private Point3D xAxis;

		/**
		 * Instance of class that represents scene. This object hold information about
		 * the Graphical objects (spheres) presented in scene.
		 */
		private Scene scene;

		/**
		 * Red, green and blue colors.
		 */
		private short[] red;
		private short[] green;
		private short[] blue;

		/**
		 * Current index in red, green and blue arrays.
		 */
		private int offset;

		/**
		 * Y range.
		 */
		private int yMin;
		private int yMax;
		
		/**
		 * Reference to RayCasterUtil class. 
		 */
		private RayCasterUtil rayCaster;

		/**
		 * Constructor to initialize private field.
		 * 
		 * @param width        Width of the window.
		 * @param height       Height of the window.
		 * @param horizontal   Horizontal.
		 * @param vertical     Vertical.
		 * @param screenCorner The corner of the screen.
		 * @param eye          Point of view.
		 * @param yAxis        y-axis.
		 * @param xAxis        x-axis.
		 * @param scene        Instance of class that represents scene. This object hold
		 *                     information about the Graphical objects (spheres)
		 *                     presented in scene.
		 * @param red          Array in which is stored value of red color.
		 * @param green        Array in which is stored value of green color.
		 * @param blue         Array in which is stored value of blue color.
		 * @param offset       Offset in red, green and blue arrays.
		 * @param yMin         Start y.
		 * @param yMax         End y.
		 */
		public Worker(int width, int height, double horizontal, double vertical, Point3D screenCorner, Point3D eye,
				Point3D yAxis, Point3D xAxis, Scene scene, short[] red, short[] green, short[] blue, int offset,
				int yMin, int yMax, RayCasterUtil rayCaster) {
			this.width = width;
			this.height = height;
			this.horizontal = horizontal;
			this.vertical = vertical;
			this.screenCorner = screenCorner;
			this.eye = eye;
			this.yAxis = yAxis;
			this.xAxis = xAxis;
			this.scene = scene;
			this.offset = offset;
			this.yMin = yMin;
			this.yMax = yMax;
			this.red = red;
			this.green = green;
			this.blue = blue;
			this.rayCaster = rayCaster;
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		protected void compute() {
			if (yMax - yMin + 1 <= 16) {
				computeDirect();
				return;
			}

			int newOffset = (yMin + (yMax - yMin) / 2 + 1) * width;

			invokeAll(
					new Worker(width, height, horizontal, vertical, screenCorner, eye, yAxis, xAxis, scene, red, green,
							blue, offset, yMin, yMin + (yMax - yMin) / 2),
					new Worker(width, height, horizontal, vertical, screenCorner, eye, yAxis, xAxis, scene, red, green,
							blue, newOffset, yMin + (yMax - yMin) / 2 + 1, yMax));
		}

		/**
		 * When task is small enough compute it. This method go through pixels from yMin
		 * to yMax and for every pixel calculates its screen point and color.
		 */
		public void computeDirect() {
			short[] rgb = new short[3];
			for (int y = yMin; y <= yMax; y++) {
				for (int x = 0; x < width; x++) {
					Point3D screenPoint = getPointXY(screenCorner, x, width, horizontal, xAxis, y, height, vertical,
							yAxis);
					Ray ray = Ray.fromPoints(eye, screenPoint);
					
					RayCaster rayCaster 
					tracer(scene, ray, rgb, eye);
					red[offset] = rgb[0] > 255 ? 255 : rgb[0];
					green[offset] = rgb[1] > 255 ? 255 : rgb[1];
					blue[offset] = rgb[2] > 255 ? 255 : rgb[2];
					offset++;
				}
			}
		}

	}
}
