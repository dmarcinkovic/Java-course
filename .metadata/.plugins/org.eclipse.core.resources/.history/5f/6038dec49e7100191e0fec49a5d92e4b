package hr.fer.zemris.java.raytracer;

import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

import hr.fer.zemris.java.raytracer.model.GraphicalObject;
import hr.fer.zemris.java.raytracer.model.IRayTracerProducer;
import hr.fer.zemris.java.raytracer.model.IRayTracerResultObserver;
import hr.fer.zemris.java.raytracer.model.LightSource;
import hr.fer.zemris.java.raytracer.model.Point3D;
import hr.fer.zemris.java.raytracer.model.Ray;
import hr.fer.zemris.java.raytracer.model.RayIntersection;
import hr.fer.zemris.java.raytracer.model.Scene;
import hr.fer.zemris.java.raytracer.viewer.RayTracerViewer;

/**
 * Program that renders an image of spheres using Ray-casting algorithm.
 * 
 * @author david
 *
 */
public class RayCaster {

	/**
	 * Method invoked when running the program. This method renders an image of
	 * spheres.
	 * 
	 * @param args Arguments provided via command line. In this program they are not
	 *             used.
	 */
	public static void main(String[] args) {
		RayTracerViewer.show(getIRayTracerProducer(), new Point3D(10, 0, 0), new Point3D(0, 0, 0),
				new Point3D(0, 0, 10), 20, 20);
	}

	

	/**
	 * Return ray tracer producer.
	 * 
	 * @return Ray tracer producer.
	 */
	private static IRayTracerProducer getIRayTracerProducer() {

		return new IRayTracerProducer() {

			@Override
			public void produce(Point3D eye, Point3D view, Point3D viewUp, double horizontal, double vertical,
					int width, int height, long requestNo, IRayTracerResultObserver observer, AtomicBoolean cancel) {

				printMethodParameters(eye, view, viewUp, width, height, horizontal, vertical);
				System.out.println("Zapo훾injem izra훾une...");

				short[] red = new short[width * height];
				short[] green = new short[width * height];
				short[] blue = new short[width * height];

				Point3D OG = getOGVector(view, eye);
				Point3D zAxis = new Point3D(-1, 0, 0);
				Point3D yAxis = getYAxis(viewUp.normalize(), OG);
				Point3D xAxis = getXAxis(OG, yAxis);

				Point3D screenCorner = getScreenCorner(view, xAxis, yAxis, horizontal, vertical);
				Scene scene = RayTracerViewer.createPredefinedScene();

				printCalculated(xAxis, yAxis, zAxis, screenCorner);

				printExample(width, height, screenCorner, horizontal, vertical, xAxis, yAxis, eye, scene);

				short[] rgb = new short[3];
				int offset = 0;
				for (int y = 0; y < height; y++) {
					for (int x = 0; x < width; x++) {
						Point3D screenPoint = getPointXY(screenCorner, x, width, horizontal, xAxis, y, height, vertical,
								yAxis);
						Ray ray = Ray.fromPoints(eye, screenPoint);

						tracer(scene, ray, rgb, eye);
						red[offset] = rgb[0] > 255 ? 255 : rgb[0];
						green[offset] = rgb[1] > 255 ? 255 : rgb[1];
						blue[offset] = rgb[2] > 255 ? 255 : rgb[2];
						offset++;
					}
				}

				System.out.println("Izra훾uni gotovi...");
				observer.acceptResult(red, green, blue, requestNo);
				System.out.println("Dojava gotova...");
			}
		};
	}

	/**
	 * Prints method parameters. This method is used to check if parameters are
	 * received correctly.
	 * 
	 * @param eye        Point of view.
	 * @param view       View.
	 * @param viewUp     Direction of y-axis.
	 * @param width      Width of the window.
	 * @param height     Height of the window.
	 * @param horizontal Horizontal.
	 * @param vertical   Vertical.
	 */
	private static void printMethodParameters(Point3D eye, Point3D view, Point3D viewUp, int width, int height,
			double horizontal, double vertical) {
		System.out.println("Parametri koje je dobila metoda");
		System.out.println("===============================");
		System.out.println("eye: (" + eye.x + " " + eye.y + " " + eye.z + ")");
		System.out.println("view: (" + view.x + " " + view.y + " " + view.z + ")");
		System.out.println("viewUp: (" + viewUp.x + " " + viewUp.y + " " + viewUp.z + ")");
		System.out.println("width: " + width);
		System.out.println("hegiht: " + height);
		System.out.println("horizontal: " + horizontal);
		System.out.println("vertical: " + vertical);
	}

	/**
	 * Prints calculated vectors to make sure they are calculated correctly.
	 * 
	 * @param xAxis        x-axis.
	 * @param yAxis        y-axis.
	 * @param zAxis        z-axis.
	 * @param screenCorner Corner of the screen.
	 */
	private static void printCalculated(Point3D xAxis, Point3D yAxis, Point3D zAxis, Point3D screenCorner) {
		System.out.println("Izra훾unato");
		System.out.println("===============================");
		System.out.println("X-vektor: " + xAxis.x + " " + xAxis.y + " " + xAxis.z);
		System.out.println("Y-vektor: " + yAxis.x + " " + yAxis.y + " " + yAxis.z);
		System.out.println("Z-vektor: " + zAxis.x + " " + zAxis.y + " " + zAxis.z);
		System.out.println("Screen-corner: " + screenCorner.x + " " + screenCorner.y + " " + screenCorner.z);
	}

	/**
	 * Prints one example with detailed information.
	 * 
	 * @param width        Width of the window.
	 * @param height       Height of the window.
	 * @param screenCorner Corner of the screen.
	 * @param horizontal   Horizontal.
	 * @param vertical     Vertical.
	 * @param xAxis        z-axis.
	 * @param yAxis        y-axis.
	 * @param eye          Point of view.
	 * @param scene        Scene.
	 */
	private static void printExample(int width, int height, Point3D screenCorner, double horizontal, double vertical,
			Point3D xAxis, Point3D yAxis, Point3D eye, Scene scene) {
		short[] rgb = new short[3];

		int[] X = { 0, width / 3, width / 2, 2 * width / 3, width - 1 };
		int[] Y = { 0, height / 3, height / 2, 2 * height / 3, height - 1 };

		System.out.println();

		for (int j = 0; j < Y.length; j++) {
			for (int i = 0; i < X.length; i++) {
				System.out.println("Informacije za tocku: x=" + X[i] + ", y=" + Y[j]);
				Point3D screenPoint = getPointXY(screenCorner, X[i], width, horizontal, xAxis, Y[j], height, vertical,
						yAxis);

				System.out
						.println("Screen-point: (" + screenPoint.x + ", " + screenPoint.y + ", " + screenPoint.z + ")");

				Ray ray = Ray.fromPoints(eye, screenPoint);

				System.out.print("Ray: start=(" + ray.start.x + ", " + ray.start.y + ", " + ray.start.z + ")");
				System.out.println(
						", direction=(" + ray.direction.x + ", " + ray.direction.y + ", " + ray.direction.z + ")");

				tracer(scene, ray, rgb, eye);

				System.out.println("RGB =[" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "]");
				System.out.println();
			}
		}
	}

	/**
	 * Method returns OG vector. This vector connects view point and eye position.
	 * 
	 * @param G View point.
	 * @param O Eye position.
	 * @return OG vector.
	 */
	private static Point3D getOGVector(Point3D G, Point3D O) {
		Point3D OG = G.sub(O).normalize();
		return OG;
	}

	/**
	 * Returns coordinate of the y-axis.
	 * 
	 * @param VUV Normalized view up vector.
	 * @param OG  Vector that connects view point and eye position.
	 * @return Coordinate of the y-axis.
	 */
	private static Point3D getYAxis(Point3D VUV, Point3D OG) {
		double scalar = OG.scalarProduct(VUV);
		Point3D yAxis = VUV.sub(OG.scalarMultiply(scalar));

		return yAxis;
	}

	/**
	 * Returns coordinate of the x-axis.
	 * 
	 * @param OG     Vector that connects view point and eye position.
	 * @param yAxsis y-axis.
	 * @return Coordinate of the x-axis.
	 */
	private static Point3D getXAxis(Point3D OG, Point3D yAxsis) {
		return OG.vectorProduct(yAxsis).normalize();
	}

	/**
	 * Returns coordinate of the screen corner.
	 * 
	 * @param G          View point.
	 * @param xAxis      x-axis.
	 * @param yAxis      y-axis.
	 * @param horizontal Horizontal.
	 * @param vertical   Vertical.
	 * @return Coordinate of the screen corner.
	 */
	private static Point3D getScreenCorner(Point3D G, Point3D xAxis, Point3D yAxis, double horizontal,
			double vertical) {
		Point3D scaledXAxis = xAxis.scalarMultiply(horizontal / 2);
		Point3D scalexYAxis = yAxis.scalarMultiply(vertical / 2);
		Point3D corner = G.sub(scaledXAxis).add(scalexYAxis);

		return corner;
	}

	/**
	 * Returns coordinate of current pixel.
	 * 
	 * @param corner     Screen corner.
	 * @param x          X coordinate of the pixel.
	 * @param width      Width of the window.
	 * @param horizontal Horizontal.
	 * @param xAxis      x-axis.
	 * @param y          y-axis.
	 * @param height     Height of the window.
	 * @param vertical   Vertical.
	 * @param yAxis      y-axis.
	 * @return Coordinate of current pixel.
	 */
	private static Point3D getPointXY(Point3D corner, double x, double width, double horizontal, Point3D xAxis,
			double y, double height, double vertical, Point3D yAxis) {
		double scale1 = x / (width - 1) * horizontal;
		Point3D scaledXAxis = xAxis.scalarMultiply(scale1);

		double scale2 = y / (height - 1) * vertical;
		Point3D scaledYAxis = yAxis.scalarMultiply(scale2);

		return corner.add(scaledXAxis).sub(scaledYAxis);
	}
}
